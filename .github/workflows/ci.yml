name: CI

on:
  push:
    branches:
      - main
  # TODO: Reactivate before public release
  # pull_request:
  #   branches:
  #     - main
  workflow_dispatch: # allows you to trigger manually

# When this workflow is queued, automatically cancel any previous running
# or pending jobs from the same branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: macos-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y

      - name: Update PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: |  
            # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
            timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      - name: Basic health check 
        run: |
          poetry run python -c "import superduperdb as s"

      - name: Lint
        run: |
          poetry run make lint

  test:
    #needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ "macos-latest" ]  #"ubuntu-latest",
        python-version: ["3.8"]  # TODO: Increase range of supported CPython versions
    defaults:
      run:
        shell: bash
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Cross-platform steps based on https://github.com/python-poetry/poetry/blob/5bad73c/.github/workflows/main.yml 
      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - -y

      - name: Update PATH
        if: ${{ matrix.os != 'windows-latest' }}
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update Path for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Enable long paths for git on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        # Enable handling long path names (+260 char) on the Windows platform
        # https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#maximum-path-length-limitation
        run: git config --system core.longpaths true

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true  

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: |  
          # `timeout` is not available on macOS, so we define a custom function.
          [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }

          # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
          timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      - name: Setup docker-compose (missing on MacOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install docker
          brew install docker-compose
          echo "$HOMEBREW_PREFIX/bin" >> $GITHUB_PATH
          mkdir -p /Users/runner/.docker/cli-plugins
          ln -sfn $HOMEBREW_PREFIX/opt/docker-compose/bin/docker-compose /Users/runner/.docker/cli-plugins/docker-compose

      - name: Test
        run: |
          poetry run make test
